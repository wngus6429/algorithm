// 연속 부분수열의 합이 M 이하인 경우의 수를 구하는 함수
function solution(m, arr) {
  let answer = 0; // 조건을 만족하는 연속 부분수열의 개수를 저장할 변수
  let sum = 0; // 현재 연속 부분수열의 합을 저장하는 변수
  let lt = 0; // 왼쪽 포인터 (left pointer)를 의미하며, 연속 부분수열의 시작 인덱스를 나타냄

  // 오른쪽 포인터 (rt)를 이용해 배열의 각 원소를 순회합니다.
  // rt는 현재 연속 부분수열의 끝 인덱스를 나타냅니다.
  for (let rt = 0; rt < arr.length; rt++) {
    // 현재 오른쪽 포인터가 가리키는 원소를 부분수열의 합에 추가합니다.
    sum += arr[rt];

    // 만약 현재 부분수열의 합이 m을 초과하면,
    // 왼쪽 포인터를 오른쪽으로 이동시키며 합에서 빠져나갈 원소들을 제거합니다.
    // 이 과정을 통해 sum이 m 이하가 되는 지점을 찾습니다.
    while (sum > m) {
      sum -= arr[lt]; // 왼쪽 포인터가 가리키는 원소를 합에서 빼줍니다.
      lt++; // 왼쪽 포인터를 한 칸 오른쪽으로 이동합니다.
    }

    // 현재 rt까지의 부분수열(인덱스 lt ~ rt)는 모두 합이 m 이하임이 보장됩니다.
    // 이때, rt 위치에서 만들 수 있는 새로운 연속 부분수열의 개수는 (rt - lt + 1)개입니다.
    // 예를 들어, lt가 1이고 rt가 3이라면,
    // 가능한 부분수열은 {arr[3]}, {arr[2], arr[3]}, {arr[1], arr[2], arr[3]} 총 3가지입니다.
    answer += rt - lt + 1;
  }
  // 조건을 만족하는 연속 부분수열의 전체 개수를 반환합니다.
  return answer;
}

// 예시: N=5, M=5, 배열=[1, 3, 1, 2, 3]
// 문제에서 주어진 예시와 같이 결과는 10이 나와야 합니다.
let a = [1, 3, 1, 2, 3];
console.log(solution(5, a)); // 10 출력
